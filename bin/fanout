#!/usr/bin/env python3
from sys import argv, stdin, stdout, stderr
from subprocess import Popen, PIPE
from dataclasses import dataclass
from functools import partial
from threading import Thread
from shutil import which


@dataclass
class State:
    is_ended: bool = False
    count: int = 0


def main():
    commands = argv[1:]
    state = State()
    processes = list(map(run, commands))
    for process in processes:
        assert process.poll() is None
    spawn(partial(write, processes, state))
    read(processes, state)


def run(command):
    return Popen(
        [which("bash"), "-c", command],
        stderr=stderr,
        stdout=PIPE,
        stdin=PIPE,
        text=True,
        bufsize=0,
    )


def spawn(function):
    Thread(target=function).start()


def write(processes, state):
    count = 0
    while not state.is_ended or count < state.count:
        for process in processes:
            stdout.write(process.stdout.readline())
        count += 1


def read(processes, state):
    for line in stdin:
        for process in processes:
            process.stdin.write(line)
        state.count += 1
    state.is_ended = True


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
from functools import partial
from sys import argv, stdin
from os import environ
from transformers import AutoModelForPreTraining
import torch
from numpystring import to_string

IS_GPU = torch.cuda.is_available()


def main():
    index = int(argv[1]) if len(argv) > 1 else None
    model_name = environ.get("MODEL", "sentence-transformers/LaBSE")
    model = to_gpu(AutoModelForPreTraining.from_pretrained(model_name).eval())
    model = partial(model, output_hidden_states=True)
    for line in stdin:
        input_ids = to_gpu(unshift(torch.tensor(parse(line))))
        embeddings = select(index, get_embeddings(model(input_ids)))
        print(to_string(to_cpu(shift(embeddings))))


def parse(line):
    return list(map(int, line.split(" ")))


def to_gpu(tensor):
    return tensor.cuda() if IS_GPU else tensor


def to_cpu(tensor):
    return tensor.detach().cpu().numpy()


def shift(tensor):
    return tensor.squeeze(0)


def unshift(tensor):
    return tensor.unsqueeze(0)


def get_embeddings(output):
    return output.hidden_states[-1]


def select(index, embeddings):
    if index is None:
        return embeddings
    return unshift(embeddings[:, index, :])


if __name__ == "__main__":
    with torch.no_grad():
        main()

#!/usr/bin/env python3
from os import environ
from sys import argv, stdin
from transformers import AutoModelForPreTraining
from numpy import fromstring
import torch
from numpystring import to_string

IS_GPU = torch.cuda.is_available()


def main():
    index = int(argv[1]) if len(argv) > 1 else None
    model_name = environ.get("MODEL", "sentence-transformers/LaBSE")
    model = cuda(AutoModelForPreTraining.from_pretrained(model_name).eval())
    for line in stdin:
        tokens = fromstring(line.strip(), sep=" ", dtype=int)
        tokens = torch.tensor(tokens).unsqueeze(0)
        outputs = model(cuda(tokens), output_hidden_states=True)
        embeddings = outputs.hidden_states[-1].squeeze(0)
        if index is not None:
            embeddings = embeddings[index].unsqueeze(0)
        array = embeddings.detach().cpu().numpy()
        print(to_string(array))


def cuda(tensor):
    return tensor.cuda() if IS_GPU else tensor


if __name__ == "__main__":
    with torch.no_grad():
        main()
